import Button from "@/components/Button";
import FormField from "@/components/FormField";
import Logo from "@/components/Logo";
import { getProviders } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useReducer, useState } from "react";
import { getCsrfToken, signIn } from "next-auth/react";
import { useRouter } from "next/router";
import { useCarrierStore, useUserStore } from "@/utils/code";
import { axiosInstance, axiosInstance2 } from "@/pages/api/axiosApi";
import toastcomp from "@/components/toast";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useLangStore } from "@/utils/code";

export default function CanCareerSignIn({ providers }: any) {
	const { t } = useTranslation("common");
	const srcLang = useLangStore((state: { lang: any }) => state.lang);
	const router = useRouter();
	const updateLoginInfo = (
		prevState: { email: string; password: string },
		event: { target: { id: string; value: any } }
	) => {
		return { ...prevState, [event.target.id]: event.target.value };
	};

	const [loginInfo, dispatch] = useReducer(updateLoginInfo, {
		email: "",
		password: ""
	});

	const { vrefid } = router.query;

	const vid = useCarrierStore((state: { vid: any }) => state.vid);
	const setvid = useCarrierStore((state: { setvid: any }) => state.setvid);

	const type = useUserStore((state: { type: any }) => state.type);
	const role = useUserStore((state: { role: any }) => state.role);
	const user = useUserStore((state: { user: any }) => state.user);
	const settype = useUserStore((state: { settype: any }) => state.settype);
	const setrole = useUserStore((state: { setrole: any }) => state.setrole);
	const setuser = useUserStore((state: { setuser: any }) => state.setuser);
	const [btnLoader, setBtnLoader] = useState(false);
	const [success, setSuccess] = useState(false);

	const handleSubmit = async (event: any) => {
		event.preventDefault();
		setBtnLoader(true);

		await axiosInstance2
			.post("/vendors/vendor_login/", {
				email: loginInfo.email,
				password: loginInfo.password
			})
			.then(async (response) => {
				console.log("@", response.data);
				setBtnLoader(false);
				setSuccess(true);
				if (response.data.role) {
					setrole(response.data.role);
				}
				if (response.data.type) {
					settype(response.data.type);
				}
				if (response.data.userObj && response.data["userObj"].length > 0) {
					setuser(response.data.userObj);
				}
				setvid(vrefid);

				const callback = `${
					process.env.NODE_ENV === "production"
						? process.env.NEXT_PUBLIC_PROD_FRONTEND + "vendor/" + vrefid + "/clients/"
						: process.env.NEXT_PUBLIC_DEV_FRONTEND + "vendor/" + vrefid + "/clients/"
				}`;
				await signIn("credentials", {
					email: loginInfo.email,
					password: loginInfo.password,
					user_type: "vendor",
					callbackUrl: callback
				})
					.then(async (res) => {
						console.log({ res });
						router.push(`/vendor/${vrefid}/clients`);
					})
					.catch((err) => {
						console.log(err);
					});
			})
			.catch((err) => {
				setBtnLoader(false);
				settype("");
				setrole("");
				setuser([]);
				console.log(err);
				if (err.response.data.non_field_errors) {
					err.response.data.non_field_errors.map((text: any) => toastcomp(text, "error"));
					return false;
				}
				if (err.response.data.detail) {
					toastcomp(err.response.data.detail, "error");
					return false;
				}
				if (err.response.data.errors.email) {
					err.response.data.errors.email.map((text: any) => toastcomp(text, "error"));
					return false;
				}
			});
	};

	return (
		<>
			<Head>
				<title>
					{t("Words.Vendors")} | {t("Btn.SignIn")}
				</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<main className="py-8">
				<form className="mx-auto w-full max-w-[550px] px-4" onSubmit={handleSubmit}>
					<div className="mb-4 text-center">
						<Logo width={180} />
					</div>
					<div className="min-h-[400px] rounded-large bg-white p-6 shadow-normal dark:bg-gray-800 md:px-12 md:py-8">
						<h1 className="mb-6 text-3xl font-bold">
							{srcLang === "ja" ? (
								"ログイン"
							) : (
								<>
									Sign <span className="text-primary">In</span>
								</>
							)}
						</h1>
						<FormField
							fieldType="input"
							inputType="email"
							label={t("Form.Email")}
							id="email"
							value={loginInfo.email}
							handleChange={dispatch}
							icon={<i className="fa-regular fa-envelope"></i>}
							required
						/>
						<FormField
							fieldType="input"
							inputType="password"
							label={t("Form.Password")}
							id="password"
							value={loginInfo.password}
							handleChange={dispatch}
							required
						/>
						<div className="mb-4 flex flex-wrap items-center justify-between">
							<div className="flex items-center">
								<label htmlFor="rememberMe" className="text-darkGray">
									<input type="checkbox" id="rememberMe" className="mb-1 mr-2 rounded border-lightGray" />
									{srcLang === "ja" ? "ログイン情報を保存" : "Remember Me"}
								</label>
							</div>
							<Link href={"/auth/forgot"} className="font-bold text-primary hover:underline">
								{srcLang === "ja" ? "パスワードを忘れた方" : "Forgot Password?"}
							</Link>
						</div>
						<div className="mb-4">
							<Button btnType="submit" label={t("Btn.SignIn")} full={true} loader={btnLoader} disabled={btnLoader} />
						</div>
						{success && (
							<p className="mb-4 text-center text-sm text-green-600">
								<i className="fa-solid fa-check fa-lg mr-2 align-middle"></i> Login Successfully
							</p>
						)}
						<p className="text-center text-darkGray">
							{srcLang === "ja" ? "アカウント作成がまだの方は" : "Not sign up yet ?"}{" "}
							<Link href={`/vendor/${vrefid}/signup`} className="font-bold text-primary hover:underline">
								{srcLang === "ja" ? "こちら" : "Create Account"}
							</Link>
						</p>
					</div>
				</form>
			</main>
		</>
	);
}
export async function getStaticPaths() {
	return {
		paths: [
			// `vendor/${vrefid}/clients`,
			{ params: { vrefid: "string" } }
		],
		fallback: true
	};
}
export async function getStaticProps({ context, locale }: any) {
	const translations = await serverSideTranslations(locale, ["common"]);
	return {
		props: {
			...translations
		}
	};
}

CanCareerSignIn.noAuth = true;
