import Button from "@/components/button";
import FormField from "@/components/FormField";
import Logo from "@/components/logo";
import { getProviders } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useReducer } from "react";
import { getCsrfToken, signIn } from "next-auth/react";
import { useRouter } from "next/router";
import toast from "react-hot-toast";
import dynamic from "next/dynamic";
const Toaster = dynamic(() => import("../../components/Toaster"), {
	ssr: false
});

const errorMessages = {
	Signin: "Try signing with a different account.",
	OAuthSignin: "Try signing with a different account.",
	OAuthCallback: "Try signing with a different account.",
	OAuthCreateAccount: "Try signing with a different account.",
	EmailCreateAccount: "Try signing with a different account.",
	Callback: "Try signing with a different account.",
	OAuthAccountNotLinked: "To confirm your identity, sign in with the same account you used originally.",
	EmailSignin: "Check your email address.",
	CredentialsSignin: "Sign in failed. Check the details you provided are correct.",
	default: "Unable to sign in."
};

const AuthError = ({ error }: { error: any }) => {
	const errorMessage = error && (errorMessages[error as keyof typeof errorMessages] ?? errorMessages.default);
	return <div className="pb-4 text-red-600">{errorMessage}</div>;
};

export default function SignIn({ providers }: any) {
	const router = useRouter();
	const updateLoginInfo = (
		prevState: { email: string; password: string },
		event: { target: { id: string; value: any } }
	) => {
		return { ...prevState, [event.target.id]: event.target.value };
	};

	const { error } = useRouter().query;

	const [loginInfo, dispatch] = useReducer(updateLoginInfo, {
		email: "",
		password: ""
	});

	const handleSubmit = async (event: any) => {
		event.preventDefault();
		const callback = `${
			process.env.NODE_ENV === "production"
				? process.env.NEXT_PUBLIC_PROD_FRONTEND
				: process.env.NEXT_PUBLIC_DEV_FRONTEND
		}`;
		await signIn("credentials", {
			email: loginInfo.email,
			password: loginInfo.password,
			callbackUrl: callback
		})
			.then(async (res) => console.log({ res }))
			.then(async () => await router.push("/"))
			.catch((err) => {
				console.log(err);
			});
	};
	return (
		<>
			<Head>
				<title>Sign In</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<main className="py-8">
				<Toaster />
				<form className="mx-auto w-full max-w-[550px] px-4" onSubmit={handleSubmit}>
					<div className="mb-4 text-center">
						<Logo width={180} />
					</div>
					<div className="min-h-[400px] rounded-large bg-white p-6 shadow-normal dark:bg-gray-800 md:py-8 md:px-12">
						<h1 className="mb-6 text-3xl font-bold">
							Sign <span className="text-primary">In</span>
						</h1>
						<AuthError error={error} />

						<FormField
							fieldType="input"
							inputType="email"
							label="Email"
							id="email"
							value={loginInfo.email}
							handleChange={dispatch}
							icon={<i className="fa-regular fa-envelope"></i>}
							required
						/>
						<FormField
							fieldType="input"
							inputType="password"
							label="Password"
							id="password"
							value={loginInfo.password}
							handleChange={dispatch}
							required
						/>
						<div className="mb-4 flex flex-wrap items-center justify-between">
							<div className="flex items-center">
								<label htmlFor="rememberMe" className="text-darkGray">
									<input type="checkbox" id="rememberMe" className="mr-2 mb-1 rounded border-lightGray" />
									Remember Me
								</label>
							</div>
							<Link href={"/auth/forgot"} className="font-bold text-primary hover:underline">
								Forgot Password?
							</Link>
						</div>
						<div className="mb-4">
							<Button btnType="submit" label="Sign In" full={true} loader={false} disabled={false} />
						</div>
						<p className="text-center text-darkGray">
							Not sign up yet ?{" "}
							<Link href={"/auth/signup"} className="font-bold text-primary hover:underline">
								Create Account
							</Link>
						</p>
					</div>
				</form>
			</main>
		</>
	);
}

export async function getServerSideProps(context: any) {
	const providers = await getProviders();
	return {
		props: {
			providers
		}
	};
}
