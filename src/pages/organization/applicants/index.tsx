import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { axiosInstance } from "@/utils";
import { getToken } from "next-auth/jwt";
import { useSession } from "next-auth/react";
import Orgsidebar from "@/components/organization/SideBar";
import Orgtopbar from "@/components/organization/TopBar";
import { axiosInstanceAuth } from "@/pages/api/axiosApi";
import { useEffect, useState } from "react";
import { useApplicantStore } from "@/utils/code";
import Button from "@/components/Button";
import { Listbox, Transition } from "@headlessui/react";

const jobs = [
	{ id: 1, name: "Software Developer", unavailable: false },
	{ id: 2, name: "Human Resource", unavailable: false },
	{ id: 3, name: "Lead Generation", unavailable: false },
	{ id: 4, name: "IT Manager", unavailable: true },
	{ id: 5, name: "Data Analyst", unavailable: false },
	{ id: 6, name: "All", unavailable: false }
];

export default function Home() {
	const router = useRouter();

	const [selectedJob, setSelectedJob] = useState(jobs[0]);

	const applicantlist = useApplicantStore((state) => state.applicantlist);
	const setapplicantlist = useApplicantStore((state) => state.setapplicantlist);
	const jobid = useApplicantStore((state) => state.jobid);
	const setjobid = useApplicantStore((state) => state.setjobid);
	const canid = useApplicantStore((state) => state.canid);
	const setcanid = useApplicantStore((state) => state.setcanid);

	const { data: session } = useSession();
	const [token, settoken] = useState("");
	const [refersh, setrefersh] = useState(0);

	useEffect(() => {
		if (session) {
			settoken(session.accessToken as string);
		} else if (!session) {
			settoken("");
		}
	}, [session]);

	const axiosInstanceAuth2 = axiosInstanceAuth(token);

	async function loadApplicant() {
		await axiosInstanceAuth2
			.get(`/job/listapplicant/`)
			.then(async (res) => {
				console.log(res.data);
				setapplicantlist(res.data);
				setrefersh(0);
			})
			.catch((err) => {
				console.log(err);
				setrefersh(0);
			});
	}

	useEffect(() => {
		if ((token.length > 0 && applicantlist.length <= 0) || refersh != 0) {
			loadApplicant();
		}
	}, [token, applicantlist, refersh]);

	return (
		<>
			<Head>
				<title>Applicants</title>
				<meta name="description" content="Generated by create next app" />
			</Head>
			<main>
				<Orgsidebar />
				<Orgtopbar />
				<div id="overlay" className="fixed left-0 top-0 z-[9] hidden h-full w-full bg-[rgba(0,0,0,0.2)]"></div>
				<div className="layoutWrap">
					<div className="flex flex-wrap items-center justify-between bg-white py-6 px-4 py-4 shadow-normal lg:px-8">
						<div className="mr-3">
							<Listbox value={selectedJob} onChange={setSelectedJob}>
								<Listbox.Button className={"text-xl font-bold"}>
									{selectedJob.name} <i className="fa-solid fa-chevron-down ml-2 text-sm"></i>
								</Listbox.Button>
								<Transition
									enter="transition duration-100 ease-out"
									enterFrom="transform scale-95 opacity-0"
									enterTo="transform scale-100 opacity-100"
									leave="transition duration-75 ease-out"
									leaveFrom="transform scale-100 opacity-100"
									leaveTo="transform scale-95 opacity-0"
								>
									<Listbox.Options
										className={"absolute left-0 top-[100%] mt-2 w-[250px] rounded-normal bg-white py-2 shadow-normal"}
									>
										{jobs.map((item) => (
											<Listbox.Option
												key={item.id}
												value={item}
												disabled={item.unavailable}
												className="clamp_1 relative cursor-pointer px-6 py-2 pl-8 text-sm hover:bg-gray-100"
											>
												{({ selected }) => (
													<>
														<span className={` ${selected ? "font-bold" : "font-normal"}`}>{item.name}</span>
														{selected ? (
															<span className="absolute left-3">
																<i className="fa-solid fa-check"></i>
															</span>
														) : null}
													</>
												)}
											</Listbox.Option>
										))}
									</Listbox.Options>
								</Transition>
							</Listbox>
						</div>
						<div className="flex items-center">
							<div></div>
						</div>
					</div>
					<div className="p-4 lg:p-8"></div>
				</div>
				<div id="dashboard" className="p-4 lg:p-8">
					<div className="-mx-4 flex flex-wrap items-center">
						{applicantlist &&
							applicantlist.map((data, i) => (
								<ul
									key={i}
									className="m-4 w-full list-disc rounded-normal bg-white p-4 p-6 shadow-normal hover:bg-lightBlue dark:bg-gray-700 dark:hover:bg-gray-600"
								>
									<li>
										Aplicant Id : <span className="text-lg font-bold">{data["arefid"]}</span>
									</li>
									<li>
										Job Id : <span className="text-lg font-bold">{data["job"]["refid"]}</span>
									</li>
									<li>
										Candidate Id : <span className="text-lg font-bold"> {data["user"]["erefid"]}</span>
									</li>
									<li>
										Applicant Status : <span className="text-lg font-bold">{data["status"]}</span>
									</li>
									<li>
										Candidate Email : <span className="text-lg font-bold">{data["user"]["email"]}</span>
									</li>
									<li>
										Job Title : <span className="text-lg font-bold">{data["job"]["job_title"]}</span>
									</li>
									<li>
										<Button
											label="View"
											loader={false}
											btnType="button"
											handleClick={() => {
												setjobid(data["job"]["refid"]);
												setcanid(data["user"]["erefid"]);
												router.push("applicants/detail");
											}}
										/>
									</li>
								</ul>
							))}
					</div>
				</div>
			</main>
		</>
	);
}
